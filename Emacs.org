#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+STARTUP: showeverything

#+BEGIN_SRC emacs-lisp
  ;;; DO NOT EDIT THIS FILE MANUALLY
  ;;; This file has been generated by Emacs.org. Make any changes to that file, 
  ;;; which will automatically generate a new Emacs.el file as well.

  ;;; To install this successfully, you need to run the command
  ;;;   M-x all-the-icons-install-fonts

#+END_SRC

* Font setup
#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'default nil :font "Iosevka Fixed SS07" :height 140)

#+END_SRC

* Garbage collection settings

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

* Package repository setup

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

* Store backups in separate directory

Instead of storing backup files *with* the file being backed up, often cluttering git repos, instead store them in a separate directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs_saves")))
#+END_SRC



* Line moving
#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key [(control shift p)]  'move-line-up)
  (global-set-key [(control shift n)]  'move-line-down)
#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :init (ivy-mode 1))

  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+END_SRC

* Rainbow delimeters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* General UI

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (setq visible-bell t)

  (set-frame-parameter nil 'fullscreen 'maximized)

  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))


  (use-package doom-themes
    :config
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (setq column-number-mode t)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

* Which key stuff

 #+BEGIN_SRC emacs-lisp

   (use-package which-key
     :init (which-key-mode)
     :diminish
     :config (setq which-key-idle-delay 1.0))
 
 #+END_SRC


* Code completion

#+BEGIN_SRC emacs-lisp

  (use-package company
    :hook (prog-mode . company-mode)
    :custom (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;;; This makes the box disappear?
  ;(use-package company-box
  ;  :hook (company-mode . company-box-mode))
#+END_SRC

* Languages
** Racket
#+BEGIN_SRC emacs-lisp

  (use-package racket-mode)

#+END_SRC

* Org mode stuff

#+BEGIN_SRC emacs-lisp

  (defun hrjakobsen/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . hrjakobsen/org-mode-setup)
    :config 
    (setq org-ellipsis " ∨"
          org-src-tab-acts-natively t))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config (setq org-hide-leading-stars t
                  org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  (defun hrjakobsen/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode t))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . hrjakobsen/org-mode-visual-fill))

#+END_SRC
